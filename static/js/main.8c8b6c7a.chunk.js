(this["webpackJsonpflowers-no-1"]=this["webpackJsonpflowers-no-1"]||[]).push([[0],{61:function(e,n,o){},62:function(e,n,o){"use strict";o.r(n);var t=o(6),r=o.n(t),a=o(39),s=o.n(a),i=o(18),c=o(11),l=o(13),_=o(7);function u(e,n){switch(n.type){case"UPDATE_AUDIO_STATE":return Object(_.a)(Object(_.a)({},e),{},{audioIsPlaying:n.payload});case"UPDATE_CURRENT_NOTE":return Object(_.a)(Object(_.a)({},e),{},{currentNote:n.payload});case"UPDATE_NOTES":return Object(_.a)(Object(_.a)({},e),{},{notes:[].concat(Object(l.a)(e.notes),[n.payload])});default:throw new Error("Action type does not exist!")}}var f=o(9),m={audioIsPlaying:!1,notes:[],currentNote:0},d=Object(t.createContext)(m),v=function(e){var n=e.children,o=Object(t.useReducer)(u,m),r=Object(c.a)(o,2),a=r[0],s=r[1];return Object(f.jsx)(d.Provider,{value:{audioIsPlaying:a.audioIsPlaying,updateIsAudioPlaying:function(e){s({type:"UPDATE_AUDIO_STATE",payload:e})},notes:a.notes,updateNotes:function(e){s({type:"UPDATE_NOTES",payload:e})},currentNote:a.currentNote,updateCurrentNote:function(e){s({type:"UPDATE_CURRENT_NOTE",payload:e})}},children:n})},p=o(64),x=o(8),h="\n#define PI 3.14159265359\n\nuniform float u_ratio;\nuniform float u_moving;\nuniform float u_stop_time;\nuniform float u_speed;\nuniform vec2 u_stop_randomizer;\nuniform float u_clean;\nuniform vec2 u_point;\nuniform sampler2D u_texture;\nvarying vec2 vUv;\n\nfloat rand(vec2 n) {\n    return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\nfloat snoise(vec2 v) {\n    const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439);\n    vec2 i = floor(v + dot(v, C.yy));\n    vec2 x0 = v - i + dot(i, C.xx);\n    vec2 i1;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n    i = mod289(i);\n    vec3 p = permute(permute(i.y + vec3(0.0, i1.y, 1.0)) + i.x + vec3(0.0, i1.x, 1.0));\n    vec3 m = max(0.5 - vec3(dot(x0, x0), dot(x12.xy, x12.xy), dot(x12.zw, x12.zw)), 0.0);\n    m = m*m;\n    m = m*m;\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n    m *= 1.79284291400159 - 0.85373472095314 * (a0*a0 + h*h);\n    vec3 g;\n    g.x = a0.x * x0.x + h.x * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n}\n\nfloat noise(vec2 n) {\n    const vec2 d = vec2(0., 1.);\n    vec2 b = floor(n), f = smoothstep(vec2(0.), vec2(1.), fract(n));\n    return mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\n\nfloat get_stem_shape(vec2 _p, vec2 _uv, float _w, float _angle) {\n\n    float x_offset = _p.y * sin(_angle);\n    x_offset *= pow(3. * _uv.y, 2.);\n    _p.x -= x_offset;\n\n    // add horizontal noise to the cursor coordinale\n    float noise_power = .5;\n    float cursor_horizontal_noise = noise_power * snoise(2. * _uv * u_stop_randomizer[0]);\n    cursor_horizontal_noise *= pow(dot(_p.y, _p.y), .6);// moise to be zero at cursor\n    cursor_horizontal_noise *= pow(dot(_uv.y, _uv.y), .3);// moise to be zero at bottom\n    _p.x += cursor_horizontal_noise;\n\n    // vertical line through the cursor point (_p.x)\n    float left = smoothstep(-_w, 0., _p.x);\n    float right = 1. - smoothstep(0., _w, _p.x);\n    float stem_shape = left * right;\n\n    // make it grow + don't go up to the cursor point\n    float grow_time = 1. - smoothstep(0., .2, u_stop_time);\n    float stem_top_mask = smoothstep(0., pow(grow_time, .5), .03 -_p.y);\n    stem_shape *= stem_top_mask;\n\n    // stop drawing once done\n    stem_shape *= (1. - step(.17, u_stop_time));\n\n    return stem_shape;\n}\n\nfloat flower_shape(vec2 _point, float _size, float _outline, float _tickniess, float _noise, float _angle_offset) {\n    float random_by_uv = noise(vUv);\n\n    float petals_thickness = .5;\n    float petals_number = 5. + floor(u_stop_randomizer[0] * 4.);\n    float angle_animated_offset = .7 * (random_by_uv - .5) / (1. + 30. * u_stop_time);\n    float flower_angle = atan(_point.y, _point.x) - angle_animated_offset;\n    float flower_sectoral_shape = abs(sin(flower_angle * .5 * petals_number + _angle_offset)) + _tickniess * petals_thickness;\n\n    vec2 flower_size_range = vec2(2., 18.);\n    float flower_radial_shape = length(_point) * (flower_size_range[0] + flower_size_range[1] * u_stop_randomizer[0]);\n    float radius_noise = sin(flower_angle * 13. + 15. * random_by_uv);\n    flower_radial_shape += _noise * radius_noise;\n\n    float flower_radius_grow = 1.;\n\n    float flower_shape = 1. - smoothstep(0., _size * flower_sectoral_shape, _outline * flower_radius_grow * flower_radial_shape);\n    flower_shape *= (1. - u_moving);\n\n    flower_shape *= (1. - step(1., u_stop_time));\n\n    return flower_shape;\n}\n\nvoid main() {\n\n    vec3 base = texture2D(u_texture, vUv).rgb;\n    vec2 cursor = vUv - u_point.xy;\n    cursor.x *= u_ratio;\n\n    // ========================================\n    // STEM\n\n    vec2 uv = vUv;\n    uv.x *= u_ratio;\n    float angle = .5 * (u_stop_randomizer[0] - .5);\n    vec3 stem_color = vec3(.1 + u_stop_randomizer[0] * .6, .6, .2);\n    float stem_shape = get_stem_shape(cursor, uv, .003, angle);\n    stem_shape += get_stem_shape(cursor + vec2(0., .2 + .5 * u_stop_randomizer[0]), uv, .003, angle);\n    float stem_mask = 1. - get_stem_shape(cursor, uv, .004, angle);\n    stem_mask -= get_stem_shape(cursor + vec2(0., .2 + .5 * u_stop_randomizer[0]), uv, .004, angle);\n\n    // ========================================\n    // FLOWER\n\n    // flower_shape:\n    // - center\n    // - size coefficient\n    // - bright outline width\n    // - extra sectoral weight\n    // - noise power\n    // - angle offset\n\n    vec3 flower_color = vec3(.7 + u_stop_randomizer[1], .8 * u_stop_randomizer[1], 2.9 + u_stop_randomizer[0] * .6);\n    vec3 flower_new = flower_color * flower_shape(cursor, 1., .96, 1., .15, 0.);\n    vec3 flower_mask = 1. - vec3(flower_shape(cursor, 1.55, 1.07, 1., .15, 0.));\n    vec3 flower_mid = vec3(-.6) * flower_shape(cursor, .15, 1., 2., .1, 1.9);\n\n    vec3 color = base * flower_mask + (flower_new + flower_mid);\n    color *= stem_mask;\n    color += (stem_shape * stem_color);\n    color *= u_clean;\n    color = clamp(color, vec3(.0, .0, .15), vec3(1., 1., .4));\n\n    gl_FragColor = vec4(color, 1.);\n}\n";function w(e){var n=e.notes,o=e.currentNote,r=Object(t.useRef)(),a=Object(t.useRef)(),s=Object(t.useState)(!1),l=Object(c.a)(s,2),_=l[0],u=l[1],m=Object(t.useState)(h),d=Object(c.a)(m,2),v=d[0],w=d[1],g=Object(t.useState)(!1),y=Object(c.a)(g,2),b=y[0],j=y[1],z=Object(p.a)(window.innerWidth,window.innerHeight),O=Object(p.a)(window.innerWidth,window.innerHeight),C=new x.Scene,k={x:.5,y:.5,grow:!1},E=Object(t.useMemo)((function(){return{u_stop_time:{type:"f",value:0},u_point:{type:"v2",value:new x.Vector2(k.x,k.y)},u_moving:{type:"f",value:0},u_speed:{type:"f",value:0},u_stop_randomizer:{type:"v2",value:new x.Vector2(Math.random(),Math.random())},u_clean:{type:"f",value:1},u_ratio:{type:"f",value:window.innerWidth/window.innerHeight},u_texture:{type:"t",value:null}}}),[k.x,k.y]);return Object(i.c)((function(e){var n=e.clock,o=e.gl,t=e.scene,s=e.camera;r.current.material.uniforms.u_clean.value=_?0:1,r.current.material.uniforms.u_point.value=new x.Vector2(k.x,1-k.y),r.current.material.uniforms.u_texture.value=z.texture,r.current.material.uniforms.u_ratio.value=window.innerWidth/window.innerHeight,k.grow?(r.current.material.uniforms.u_moving.value=1,r.current.material.uniforms.u_stop_randomizer.value=new x.Vector2(Math.random(),Math.random()),r.current.material.uniforms.u_stop_time.value=0,k.grow=!1):r.current.material.uniforms.u_moving.value=0,r.current.material.uniforms.u_stop_time.value+=n.getDelta(),o.setRenderTarget(O),o.render(t,s),a.current.material.map=O.texture,o.setRenderTarget(null),o.render(C,s);var i=z;z=O,O=i})),Object(t.useEffect)((function(){o.clearCanvas&&(u(!0),setTimeout((function(){u(!1)}),50)),o.canGlitch&&(j(!b),w(b?"\n#define PI 3.14159265359\n\nuniform float u_ratio;\nuniform float u_moving;\nuniform float u_stop_time;\nuniform float u_speed;\nuniform vec2 u_stop_randomizer;\nuniform float u_clean;\nuniform vec2 u_point;\nuniform sampler2D u_texture;\nvarying vec2 vUv;\n\nfloat rand(vec2 n) {\n    return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\nfloat snoise(vec2 v) {\n    const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439);\n    vec2 i = floor(v + dot(v, C.yy));\n    vec2 x0 = v - i + dot(i, C.xx);\n    vec2 i1;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n    i = mod289(i);\n    vec3 p = permute(permute(i.y + vec3(0.0, i1.y, 1.0)) + i.x + vec3(0.0, i1.x, 1.0));\n    vec3 m = max(0.5 - vec3(dot(x0, x0), dot(x12.xy, x12.xy), dot(x12.zw, x12.zw)), 0.0);\n    m = m*m;\n    m = m*m;\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n    m *= 1.79284291400159 - 0.85373472095314 * (a0*a0 + h*h);\n    vec3 g;\n    g.x = a0.x * x0.x + h.x * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n}\n\nfloat noise(vec2 n) {\n    const vec2 d = vec2(0., 1.);\n    vec2 b = floor(n), f = smoothstep(vec2(0.), vec2(1.), fract(n));\n    return mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\n\nfloat get_stem_shape(vec2 _p, vec2 _uv, float _w, float _angle) {\n\n    float x_offset = _p.y * sin(_angle);\n    x_offset *= pow(3. * _uv.y, 2.);\n    _p.x -= x_offset;\n\n    // add horizontal noise to the cursor coordinale\n    float noise_power = .5;\n    float cursor_horizontal_noise = noise_power * snoise(2. * _uv * u_stop_randomizer[0]);\n    cursor_horizontal_noise *= pow(dot(_p.y, _p.y), .6);// moise to be zero at cursor\n    cursor_horizontal_noise *= pow(dot(_uv.y, _uv.y), .3);// moise to be zero at bottom\n    _p.x += cursor_horizontal_noise;\n\n    // vertical line through the cursor point (_p.x)\n    float left = smoothstep(-_w, 0., _p.x);\n    float right = 1. - smoothstep(0., _w, _p.x);\n    float stem_shape = left * right;\n\n    // make it grow + don't go up to the cursor point\n    float grow_time = 1. - smoothstep(0., .2, u_stop_time);\n    float stem_top_mask = smoothstep(0., pow(grow_time, .5), .03 -_p.y);\n    stem_shape *= stem_top_mask;\n\n    // stop drawing once done\n    stem_shape *= (1. - step(.17, u_stop_time));\n\n    return stem_shape;\n}\n\nfloat flower_shape(vec2 _point, float _size, float _outline, float _tickniess, float _noise, float _angle_offset) {\n    float random_by_uv = noise(vUv);\n\n    float petals_thickness = .5;\n    float petals_number = 5. + floor(u_stop_randomizer[0] * 4.);\n    float angle_animated_offset = .7 * (random_by_uv - .5) / (1. + 30. * u_stop_time);\n    float flower_angle = atan(_point.y, _point.x) - angle_animated_offset;\n    float flower_sectoral_shape = abs(sin(flower_angle * .5 * petals_number + _angle_offset)) + _tickniess * petals_thickness;\n\n    vec2 flower_size_range = vec2(2., 18.);\n    float flower_radial_shape = length(_point) * (flower_size_range[0] + flower_size_range[1] * u_stop_randomizer[0]);\n    float radius_noise = sin(flower_angle * 13. + 15. * random_by_uv);\n    flower_radial_shape += _noise * radius_noise;\n\n    float flower_radius_grow = 1.;\n    flower_radius_grow = 1. / flower_radius_grow;\n\n    float flower_shape = 1. - smoothstep(0., _size * flower_sectoral_shape, _outline * flower_radius_grow * flower_radial_shape);\n    flower_shape *= (1. - u_moving);\n\n    flower_shape *= (1. - step(1., u_stop_time));\n\n    return flower_shape;\n}\n\nvoid main() {\n    vec2 gridUV = vec2(sin(vUv.x * 3.0) / 3.0, sin(vUv.y * 3.0) / 3.0);\n    vec3 base = texture2D(u_texture, gridUV).rgb;\n    vec2 cursor = vUv - u_point.xy;\n    cursor.x *= u_ratio;\n\n    // ========================================\n    // STEM\n\n    vec2 uv = vUv;\n    uv.x *= u_ratio;\n    float angle = .5 * (u_stop_randomizer[0] - .5);\n    vec3 stem_color = vec3(.1 + u_stop_randomizer[0] * .6, .6, .2);\n    float stem_shape = get_stem_shape(cursor, uv, .003, angle);\n    stem_shape += get_stem_shape(cursor + vec2(0., .2 + .5 * u_stop_randomizer[0]), uv, .003, angle);\n    float stem_mask = 1. - get_stem_shape(cursor, uv, .004, angle);\n    stem_mask -= get_stem_shape(cursor + vec2(0., .2 + .5 * u_stop_randomizer[0]), uv, .004, angle);\n\n    // ========================================\n    // FLOWER\n\n    // flower_shape:\n    // - center\n    // - size coefficient\n    // - bright outline width\n    // - extra sectoral weight\n    // - noise power\n    // - angle offset\n\n    vec3 flower_color = vec3(.7 + u_stop_randomizer[1], .8 * u_stop_randomizer[1], 2.9 + u_stop_randomizer[0] * .6);\n    vec3 flower_new = flower_color * flower_shape(cursor, 1., .96, 1., .15, 0.);\n    vec3 flower_mask = 1. - vec3(flower_shape(cursor, 1.55, 1.07, 1., .15, 0.));\n    vec3 flower_mid = vec3(-.6) * flower_shape(cursor, .15, 1., 2., .1, 1.9);\n\n    vec3 color = base * flower_mask + (flower_new + flower_mid);\n    color *= stem_mask;\n    color += (stem_shape * stem_color);\n    color *= u_clean;\n    color = clamp(color, vec3(.0, .0, .15), vec3(1., 1., .4));\n\n    gl_FragColor = vec4(color, 1.);\n}\n":h)),n.length&&(k.x=Math.random(),k.y=.65*Math.random()+.25,k.grow=!0)}),[n,o]),Object(f.jsxs)(f.Fragment,{children:[Object(f.jsxs)("mesh",{ref:r,children:[Object(f.jsx)("planeGeometry",{args:[2,2]}),Object(f.jsx)("shaderMaterial",{fragmentShader:v,vertexShader:"\nvarying vec2 vUv;\n\nvoid main() {\n    vUv = uv;\n    gl_Position = vec4(position, 1.);\n}\n",uniforms:E,wireframe:!1})]}),Object(i.b)(Object(f.jsxs)("mesh",{ref:a,children:[Object(f.jsx)("planeGeometry",{args:[2,2]}),Object(f.jsx)("meshBasicMaterial",{})]}),C)]})}function g(){var e=Object(t.useContext)(d),n=e.notes,o=e.currentNote;return Object(f.jsx)(i.a,{camera:{position:[1,1,1]},orthographic:!0,children:Object(f.jsx)(t.Suspense,{fallback:"loading...",children:Object(f.jsx)(w,{notes:n,currentNote:o})})})}var y=o(32);window.p5=y;o(51);var b=o(42);function j(){return Object(f.jsxs)("svg",{id:"play-icon",className:"play-icon",xmlns:"http://www.w3.org/2000/svg",height:"24",viewBox:"0 0 24 24",width:"24",children:[Object(f.jsx)("path",{className:"play-icon__play",d:"M10 16.5l6-4.5-6-4.5v9zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"}),Object(f.jsx)("path",{className:"play-icon__pause",xmlns:"http://www.w3.org/2000/svg",d:"M9 16h2V8H9Zm4 0h2V8h-2Zm-1 6q-2.075 0-3.9-.788-1.825-.787-3.175-2.137-1.35-1.35-2.137-3.175Q2 14.075 2 12t.788-3.9q.787-1.825 2.137-3.175 1.35-1.35 3.175-2.138Q9.925 2 12 2t3.9.787q1.825.788 3.175 2.138 1.35 1.35 2.137 3.175Q22 9.925 22 12t-.788 3.9q-.787 1.825-2.137 3.175-1.35 1.35-3.175 2.137Q14.075 22 12 22Zm0-2q3.35 0 5.675-2.325Q20 15.35 20 12q0-3.35-2.325-5.675Q15.35 4 12 4 8.65 4 6.325 6.325 4 8.65 4 12q0 3.35 2.325 5.675Q8.65 20 12 20Zm0-8Z"})]})}var z=o.p+"static/media/flowers-no-1.b3989e78.ogg",O=o.p+"static/media/flowers-no-1.f38739f9.mid",C=function(){var e=Object(t.useRef)(),n=Object(t.useRef)(),o=Object(t.useContext)(d),r=o.updateNotes,a=o.updateCurrentNote,s=function(e){e.canvas=null,e.canvasWidth=window.innerWidth,e.canvasHeight=window.innerHeight,e.audioLoaded=!1,e.player=null,e.PPQ=15360,e.loadMidi=function(){b.Midi.fromUrl(O).then((function(n){var o=n.tracks[0].notes;e.scheduleCueSet(o,"executeCueSet1"),e.audioLoaded=!0,document.getElementById("loader").classList.add("loading--complete"),document.getElementById("play-icon").classList.remove("fade-out")}))},e.preload=function(){e.song=e.loadSound(z,e.loadMidi),e.song.onended(e.logCredits)},e.scheduleCueSet=function(n,o){for(var t=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=-1,a=1,s=0;s<n.length;s++){var i=n[s],c=i.ticks,l=i.time;(c!==r||t)&&(i.currentCue=a,e.song.addCue(l,e[o],i),r=c,a++)}},e.setup=function(){e.canvas=e.createCanvas(e.canvasWidth,e.canvasHeight),e.noLoop()},e.draw=function(){e.audioLoaded&&e.song.isPlaying()},e.gridVersion=1,e.executeCueSet1=function(e){var n=e.currentCue,o=e.ticks;e.clearCanvas=!1,e.canGlitch=!1,console.log(n),o%245760!==11520&&140!==n||(n<140&&(e.clearCanvas=!0),e.canGlitch=!0),a(e),r({cue:n})},e.mousePressed=function(){},e.creditsLogged=!1,e.logCredits=function(){!e.creditsLogged&&parseInt(e.song.currentTime())>=parseInt(e.song.buffer.duration)&&(e.creditsLogged=!0,console.log("Music By: http://labcat.nz/","\n","Animation By: https://github.com/LABCAT/"),e.song.stop())},e.reset=function(){},e.updateCanvasDimensions=function(){e.canvasWidth=window.innerWidth,e.canvasHeight=window.innerHeight,e.canvas=e.resizeCanvas(e.canvasWidth,e.canvasHeight)},window.attachEvent?window.attachEvent("onresize",(function(){e.updateCanvasDimensions()})):window.addEventListener&&window.addEventListener("resize",(function(){e.updateCanvasDimensions()}),!0)};return Object(t.useEffect)((function(){e.current||(e.current=new y(s,n.current))})),Object(f.jsx)("div",{ref:n,children:Object(f.jsx)("button",{onClick:function(){e.current&&e.current.audioLoaded&&(e.current.song.isPlaying()?(e.current.song.pause(),document.getElementById("play-icon").classList.remove("play-icon--playing")):(parseInt(e.current.song.currentTime())>=parseInt(e.current.song.buffer.duration)&&e.current.reset(),document.getElementById("play-icon").classList.add("play-icon--playing"),e.current.canvas.addClass("fade-in"),e.current.song.play()))},id:"play-button",children:Object(f.jsx)(j,{})})})};function k(){return Object(f.jsxs)(v,{children:[Object(f.jsx)(g,{}),Object(f.jsx)(C,{})]})}o(61);s.a.render(Object(f.jsx)(r.a.StrictMode,{children:Object(f.jsx)(k,{})}),document.getElementById("root"))}},[[62,1,2]]]);
//# sourceMappingURL=main.8c8b6c7a.chunk.js.map